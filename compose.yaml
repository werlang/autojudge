x-healthcheck: &healthcheck
    test: curl -k -f api:3000/ready
    interval: 1m
    timeout: 30s
    retries: 3

services:
    web:
        build:
            context: .
            dockerfile: Dockerfile-node
        volumes:
            - ./web:/app
            - ./package.json:/app/package.json
            - node_modules:/app/node_modules
        restart: ${RESTART_POLICY}
        ports:
            # - 127.0.0.1:9230:9229
            - 127.0.0.1:80:3000
        env_file:
            - .env
        command: >
            sh -c '
            if [ "$$NODE_ENV" = "production" ]; then
                npm run webpack
            else
                npm run webpack:dev
            fi'
        # command: tail -f /dev/null #idle container
        networks:
            - autojudge
    api:
        build:
            context: .
            dockerfile: Dockerfile-node
        restart: ${RESTART_POLICY}
        ports:
            # - 127.0.0.1:9229:9229
            - 127.0.0.1:3000:3000
        env_file:
            - .env
        volumes:
            - ./api:/app
            - ./package.json:/app/package.json
            - node_modules:/app/node_modules
        command: >
            sh -c '
            if [ "$$NODE_ENV" = "production" ]; then
                npm run start
            elif [ "$$NODE_ENV" = "development" ]; then
                npm run start:dev
            else
                echo "Test mode. No action." 
                tail -f /dev/null
            fi'
        # command: tail -f /dev/null #idle container
        networks:
            - autojudge
        depends_on:
            - mysql
            - judge
        healthcheck:
            <<: *healthcheck
    judge:
        build:
            context: .
            dockerfile: Dockerfile-dind
        restart: ${RESTART_POLICY}
        env_file:
            - .env
        volumes:
            - ./judge:/app
            - ./package.json:/app/package.json
            - node_modules:/app/node_modules
            - runs:/app/runs
            - /var/run/docker.sock:/var/run/docker.sock
        command: >
            sh -c '
            if [ "$$NODE_ENV" = "production" ]; then
                npm run start
            else
                npm run start:dev
            fi'
        # command: tail -f /dev/null #idle container
        networks:
            - autojudge
            - runner
        # ports:
        #     - 127.0.0.1:9232:9229
    background:
        build:
            context: .
            dockerfile: Dockerfile-node
        restart: ${RESTART_POLICY}
        # ports:
        #     - 127.0.0.1:9231:9229
        env_file:
            - .env
        volumes:
            - ./background:/app
            - ./package.json:/app/package.json
            - node_modules:/app/node_modules
        command: >
            sh -c '
            if [ "$$NODE_ENV" = "production" ]; then
                npm run start
            elif [ "$$NODE_ENV" = "development" ]; then
                npm run start:dev
            else
                echo "Test mode. No action." 
                tail -f /dev/null
            fi'
        networks:
            - autojudge
        depends_on:
            - api
    mysql:
        image: mysql:8.0
        restart: ${RESTART_POLICY}
        environment:
            - MYSQL_DATABASE=${MYSQL_DATABASE}
            - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
        volumes:
            - mysql:/var/lib/mysql
            - .:/app
        # ports:
        #     - 127.0.0.1:${MYSQL_PORT}:3306
        networks:
            - autojudge
        healthcheck:
            <<: *healthcheck
            test: mysql -uroot -p${MYSQL_ROOT_PASSWORD} --execute="SELECT 1" 2>/dev/null || exit 1
    gotenberg:
        image: gotenberg/gotenberg:8
        restart: ${RESTART_POLICY}
        networks:
            - autojudge
    tunnel:
        image: cloudflare/cloudflared
        restart: ${RESTART_POLICY}
        command: tunnel --no-autoupdate run
        environment:
            - TUNNEL_TOKEN=${CLOUDFLARE_TOKEN}
            - TUNNEL_METRICS=0.0.0.0:60123
        env_file:
            - .env
        networks:
            - autojudge
        healthcheck:
            <<: *healthcheck
            test: ["CMD", "cloudflared", "tunnel", "--metrics", "localhost:60123", "ready"]
    autoheal:
        image: willfarrell/autoheal
        restart: ${RESTART_POLICY}
        environment:
            - AUTOHEAL_CONTAINER_LABEL=all # autoheal all containers
            - AUTOHEAL_INTERVAL=10 # check every 10 seconds
            - AUTOHEAL_START_PERIOD=60 # wait 60 seconds before first check
            - AUTOHEAL_DEFAULT_STOP_TIMEOUT=10 # wait 10 seconds before killing container
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock # mount docker socket
volumes:
    node_modules:
    runs:
        name: judge_tmp_run
    mysql:
networks:
    runner:
    autojudge:
        name: autojudge
