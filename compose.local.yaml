services:
    web:
        build:
            context: .
            dockerfile: Dockerfile-node
        volumes:
            - ./web:/app
            - ./package.json:/app/package.json
            - node_modules:/app/node_modules
        restart: ${RESTART_POLICY}
        ports:
            - 127.0.0.1:9230:9229
            - 3000:3000
        env_file:
            - .env
        command: >
            sh -c '
            if [ "$$NODE_ENV" = "production" ]; then
                npm run webpack
            else
                npm run webpack:dev
            fi'
        # command: tail -f /dev/null #idle container
        networks:
            - autojudge
    api:
        build:
            context: .
            dockerfile: Dockerfile-node
        restart: ${RESTART_POLICY}
        ports:
            - 127.0.0.1:9229:9229
            - 3030:3000
        env_file:
            - .env
        volumes:
            - ./api:/app
            - ./package.json:/app/package.json
            - node_modules:/app/node_modules
        command: >
            sh -c '
            if [ "$$NODE_ENV" = "production" ]; then
                npm run start
            elif [ "$$NODE_ENV" = "development" ]; then
                npm run start:dev
            else
                echo "Test mode. No action." 
                tail -f /dev/null
            fi'
        # command: tail -f /dev/null #idle container
        networks:
            - autojudge
        depends_on:
            - mysql
            - judge
    judge:
        build:
            context: .
            dockerfile: Dockerfile-dind
        restart: ${RESTART_POLICY}
        env_file:
            - .env
        volumes:
            - ./judge:/app
            - ./package.json:/app/package.json
            - node_modules:/app/node_modules
            - runs:/app/runs
            - /var/run/docker.sock:/var/run/docker.sock
        command: >
            sh -c '
            if [ "$$NODE_ENV" = "production" ]; then
                npm run start
            else
                npm run start:dev
            fi'
        # command: tail -f /dev/null #idle container
        networks:
            - autojudge
            - runner
        ports:
            - 127.0.0.1:9232:9229
    background:
        build:
            context: .
            dockerfile: Dockerfile-node
        restart: ${RESTART_POLICY}
        ports:
            - 127.0.0.1:9231:9229
        env_file:
            - .env
        volumes:
            - ./background:/app
            - ./package.json:/app/package.json
            - node_modules:/app/node_modules
        command: >
            sh -c '
            if [ "$$NODE_ENV" = "production" ]; then
                npm run start
            elif [ "$$NODE_ENV" = "development" ]; then
                npm run start:dev
            else
                echo "Test mode. No action." 
                tail -f /dev/null
            fi'
        networks:
            - autojudge
        depends_on:
            - api
    mysql:
        image: mysql:8.0
        restart: ${RESTART_POLICY}
        environment:
            - MYSQL_DATABASE=${MYSQL_DATABASE}
            - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
        volumes:
            - mysql:/var/lib/mysql
            - ./database.sql:/docker-entrypoint-initdb.d/database.sql
            - .:/app
        ports:
            - 127.0.0.1:${MYSQL_PORT}:3306
        networks:
            - autojudge
    gotenberg:
        image: gotenberg/gotenberg:8
        networks:
            - autojudge
volumes:
    node_modules:
    runs:
        name: judge_tmp_run
    mysql:
networks:
    runner:
    autojudge:
        name: autojudge
